*** Pebble built-in library documentation ***

This file was generated by examples/GenerateLibDocs.txt on 4/14/2020 12:30:12 AM


********************************************************************************
CoreLib.cs
********************************************************************************

class Result<T> {
      This was added just in case users might have a need for a templated class that encapsulates a value and a status code.

    T value;
      The resultant value IF there was no error.

    num status;
      A numeric status code. By convention, 0 means no error and anything else means error.

    string message;
      A place to store error messages if desired.

    bool IsSuccess()
      Returns true iff status == 0.

    string ToString()
      Returns a string representation of the Result.

};

class ScriptResult<T> {
      For returning the result of something that can error, like an Exec call.

    T value;
      The return value if there was no error.

    ScriptError error;
      ScriptError.NoError if no error.

    string message;
      Optional error message.

    bool IsSuccess()
      Returns true iff error == ScriptError.NoError.

    string ToString()
      Returns a string representation of the ScriptError.

    global const num FORMAX;
      The highest value a for iterator can be. Attempting to exceed it generates an error.

    global ScriptResult<bool> Exec(string script)
      Executes the supplied script.
      Since this is not running "interactive" (or inline), the only way the script can
      have an external effect is if it affects global things (variables, class definitions).
      The returned ScriptResult's value is only true(success) or false (error).

    global ScriptResult<bool> ExecInline(string)
      This executes the given script in the current scope. This is different from Exec, because Exec exists in its own scope.
      The returned ScriptResult's value is only true(success) or false (error).

    global string Print(...)
      Converts all arguments to strings, concatenates them, then outputs the result using the Engine' Log function.
      This function can be set to whatever the host program likes: see Engine.Log

    global string ToScript(any)
      Returns a script which, when run, returns a value equal to the value passed into ToScript.

    global bool ToBool(any)
      Attempts to convert input into a boolean value.
      0 and null are false. != 0 and non-null references are true. Strings are handled by Convert.ToBoolean,
      which can throw an exception if it doesn't know how to convert the string.

    global num ToNum(any)
      Attempts to convert input to a num.
      true -> 1, false -> 0, null -> 0, non-null object reference -> 1. Strings are handled by Convert.ToDouble,
      which can throw an error if it doesn't know how to convert the string.

    global string ToString(...)
      Converts all arguments to strings, concatenates them, and returns the result.

};

********************************************************************************
MathLib.cs
********************************************************************************

class Math {

    static const num pi;
      pi is the ratio of a circle's circumpherence to its diameter. 3.1415...

    static const num e;
      e is the base of the natural logarithm. 2.71828...

    static const num tau;
      tau is the ratio of a circle's circumpherence to its radius. tau = 2 * pi

    static num Abs(num radians)
      Returns the absolute value of the input.

    static num Acos(num)
      Returns the arccosine of the input in radians.

    static num Asin(num)
      Returns the arcsine of the input in radians

    static num Atan(num)
      Returns the arctangent of the input in radians.

    static num Ceiling(num)
      If an exact integer, returns the integer, otherwise returns the next highest integer. aka, it rounds up.

    static num Cos(num radians)
      Returns the cosine of the input.

    static num Exp(num power)
      Returns e raised to the given power.

    static num Floor(num)
      If an exact integer, returns the integer, otherwise returns the next lower integer. aka, it rounds down.

    static num Log(num)
      Returns the natural logarithm of the input.

    static num Min(num, num)
      Returns the lesser of the two inputs.

    static num Max(num)
      Returns the greater of the two inputs.

    static num Pow(num b, num p)
      Returns b raised to the power p.

    static num Rand()
      Returns a random number between 0 and 1.

    static void RandSeed(num seed)
      Seeds the random number generator with the given value (converted to a signed 32-bit integer).

    static num Round(num n[, num decimals])
      Rounds the input to the nearest integer, or optionally to the nearest specified decimal point.

    static num Sin(num radians)
      Returns the sine of the input.

    static num Sqrt(num)
      Returns the square root of the input.

    static num Tan(num radians)
      Returns the tangent of the input.

};

********************************************************************************
StringLib.cs
********************************************************************************

class String {

    static num CompareTo(string, string)
      Wraps C# CompareTo function, which essentially returns a number < 0 if a comes before b
      alphabetically, > 0 if a comes after b, and 0 if they are identical.

    static string Concat(any[, ...])
      Converts all arguments to strings and concatenates them. Same as ToString.

    static bool EndsWith(string s, string search)
      Wrapper for C# EndsWith. Returns true if s ends with search.

    static bool Equals(string, string)
      Returns true iff the strings are exactly equal. The same thing as using the == operator.

    static bool EqualsI(string, string)
      Returns true if the strings are equal, ignoring case. Equivalent to the ~= operator.

    static string Format(string[, any, ...])
      Generated formatted strings. Wrapper for C# String.Format(string, object[]). See documentation of that function for details.
      Putting weird things like Lists or functions into the args will produce undefined results.

    static List<string> GetCharList(string)
      Returns a list of strings containing one character of the input string.

    static List<num> GetUnicode(string)
      Returns the Unicode numeric values for the characters in the input string.
      Returns an empty list if the string is empty.

    static num IndexOfChar(string toBeSearched, string searchChars, num startIndex = 0)
      Returns the index of the first instance of any of the characters in search.

    static num IndexOfString(string toBeSearched, string searchString, num startIndex = 0)
      Returns the index of the first instance of the entire search string.

    static num LastIndexOfChar(string toBeSearched, string searchChars, num startIndex = -1)
      Returns the index of the last instance of the entire search string,
      If startIndex is >= 0, starts searching backwards from the given index.

    static num LastIndexOfString(string toBeSearched, string searchString, num startIndex = -1)
      Returns the index of the last instance of the entire search string,
      If startIndex is > 0, starts searching backwards from the given index.

    static num Length(string)
      Returns the length of the string.

    static string PadLeft(string, num n, string pad)
      Returns s with n instances of string pad to the left.

    static string PadRight(string s, num n, string pad)
      Returns s with n instances of string pad to the left.

    static string Replace(string str, string find, string replace)
      Replaces all instances of the given string with the replacement string.

    static List<string> Split(string str, List<string> separators = null)
      Splits input string into a list of strings given the provided separators.
      If no separators are provided, uses the newline character.

    static bool StartsWith(string s, string start)
      Returns true if s starts with start.

    static string Substring(string, startIx, length)
      Returns a substring of the input, starting at startIx, that is length characters long.

    static string SubstringLeft(string str, num length)
      Returns the left 'length' characters of str.

    static string SubstringRight(string, start)
      Returns the right part of the string starting at 'start'.

    static string ToLower(string)
      Converts the string to lowercase.

    static string ToUpper(string)
      Converts the string to uppercase.

    static string Trim(string)
      Removes leading and trailing whitespace characters.

    static string UnicodeToString(List<num>)
      Takes a list of numeric Unicode character codes, converts them to characters, concatenates them, and returns the resultant string.

};

********************************************************************************
CoreList.cs
********************************************************************************

class List<T> {

    List<T> Add(T newValue, ...) or List<T> Push(T newValue, ...)
      Adds one or more elements to the end of the list.
      Cannot be used in a foreach loop.

    List<T> Clear()
      Removes all elements from the list.
      Cannot be used in a foreach loop.

    num Count()
      Returns the number of elements in the list.

    T Get(num index)
      Returns the value of the element of the list at the given index.

    List<T> Insert(num index, T item)
      Inserts a new element into the list at the given index. Existing elements at and after the given index are pushed further down the list.
      Cannot be used in a foreach loop.

    T Pop()
      Returns the value of the last element of the list and removes it from the list.
      Cannot be used in a foreach loop.

    List<T> RemoveAt(num index)
      Removes element at the given index, and returns the list.
      Cannot be used in a foreach loop.

    List<T> RemoveRange(num start, num count)
      Removes elements in the given range of indices, and returns the list.
      Cannot be used in a foreach loop.

    List<T> Set(num index, T newValue)
      Changes the value of the element at the given index, and returns the list.

    List<T> Sort(functype<num(T, T>)> comparator)
      Sorts the list using the given comparator function.
      The comparator should behave the same as a C# Comparer. The first argument should be earlier in the
      list than the second, return a number < 0. If It should be later, return a number > 0. If their order
      is irrelevant, return 0.

    string ThisToScript(string prefix)
      ThisToScript is used by Serialize. A classes' ThisToScript function should return code which can rebuild the class.
      Note that it's only the content of the class, not the "new A" part. ie., it's the code that goes in the defstructor.

    string ToString()
      Returns a string representation of at least the first few elements of the list.

};

********************************************************************************
CoreDictionary.cs
********************************************************************************

class Dictionary<K, V> {

    Dictionary<K, V> Add(K key, V value)
      Adds a new element to the dictionary.
      Cannot be used in a foreach loop.

    Dictionary<K, V> Clear()
      Removes all elements from the dictionary.
      Cannot be used in a foreach loop.

    bool ContainsKey(K)
      Returns true iff the dictionary contains an element with the given key.

    num Count()
      Returns number of elements in the dictionary.

    V Get(K)
      Returns the value of the element with the given key.

    Dictionary<K, V> Remove(K key)
      Removes element with given key.
      Cannot be used in a foreach loop.

    Dictionary<K, V> Set(K key, V newValue)
      Replaces value of existing element with the given key.

    string ThisToScript(string prefix)
      ThisToScript is used by Serialize. A classes' ThisToScript function should return code which can rebuild the class.
      Note that it's only the content of the class, not the "new A" part. ie., it's the code that goes in the defstructor.

    string ToString()
      Returns a human readable version of at least the first few elements of the dictionary.

};

********************************************************************************
StreamLib.cs
********************************************************************************

class Stream {
      Note that it is intentional that there is no OpenReadText method. It's easier to use
      the File library for reading text.

    bool Close()
      Closes the stream.

    bool IsReading()
      Return true iff the stream is open in read mode.

    bool IsWriting()
      Returns true iff the stream is open in write mode.

    bool IsOpen()
      Returs true iff the stream is open in either read or write mode.

    bool OpenReadBinary(string filepath)
      Opens the specified file for reading in binary mode.
      Returns false if there is an error.

    bool OpenWriteText(string filepath)
      Opens the specified file for writing in text mode.
      Returns false if there is an error.

};

********************************************************************************
DateTimeLib.cs
********************************************************************************

class DateTime {

    DateTime Clone()
      Returns a copy of 'this' DateTime.

    static DateTime Create(num year, num month, num day, num hour, num minute, num second, num millisecond)
      Creates a new DateTime with the given values.

    bool Equals(DateTime other)
      Returns true iff both this and the other DateTime have the same date and time exactly.

    static DateTime GetNow()
      Returns a new DateTime with the current date and time.

    bool IsDateSame(DateTime other)
      Returns true iff both this and the other DateTime have the same date. Time is ignored.

    DateTime Set(num year, num month, num day, num hour, num minute, num second, num millisecond)
      Gives this DateTime the given values

    string ThisToScript(string prefix)
      ThisToScript is used by Serialize. A classes' ThisToScript function should return code which can rebuild the class.
      Note that it's only the content of the class, not the "new A" part. ie., it's the code that goes in the defstructor.

    string ToString()
      Returns a string representation of this DateTime.

    num GetYear()
      Returns the DateTime's year.

    num GetMonth()
      Returns the DateTime's month.

    num GetDay()
      Returns the DateTime's day.

    num GetHour()
      Returns the DateTime's hour.

    num GetMinute()
      Returns the DateTime's minute.

    num GetSecond()
      Returns the DateTime's second.

    num GetMillisecond()
      Returns the DateTime's millisecond.

    DateTime AddYears(num years)
      Returns a new DateTime that is 'years' (rounded to nearest integer) years ahead of this DateTime. Can be negative.

    DateTime AddMonths(num months)
      Returns a new DateTime that is 'months' (rounded to nearest integer) months ahead of this DateTime. Can be negative.

    DateTime AddDays(num days)
      Returns a new DateTime that is 'days' (rounded to nearest integer) days ahead of this DateTime. Can be negative.

    DateTime AddHours(num hours)
      Returns a new DateTime that is 'hours' (rounded to nearest integer) hours ahead of this DateTime. Can be negative.

    DateTime AddMinutes(num minutes)
      Returns a new DateTime that is 'minutes' (rounded to nearest integer) minutes ahead of this DateTime. Can be negative.

    DateTime AddSeconds(num seconds)
      Returns a new DateTime that is 'seconds' (rounded to nearest integer) seconds ahead of this DateTime. Can be negative.

    DateTime AddMilliseconds(num ms)
      Returns a new DateTime that is 'ms' (rounded to nearest integer) milliseconds ahead of this DateTime. Can be negative.

};

********************************************************************************
FileLib.cs
********************************************************************************

class File {

    const string lastError;
      Stores the message of the last error generated by this library.

    static string ClearLastError()
      Clears File::lastError, returning its previous value.

    static bool Copy(string source, string dest)
      Copies a file from source to dest.
      Returns false and sets lastError on error.

    static bool CreateDir(string path)
      Creates directory.
      Returns false and sets lastError on error.

    static bool Delete(string path)
      Returns true if file deleted.
      Returns false and sets lastError on error.

    static bool DeleteDir(string path)
      Returns true if file deleted.
      Returns false and sets lastError on error.

    static string GetCurrentDirectory()
      Returns the full path of the current directory.
      Returns "" and sets lastError on error.

    static List<string> GetDirs(string path)
      Returns list of subdirectories of path.
      Returns null and sets lastError on error.

    static List<string> GetFiles(string path)
      Returns list of all files in the given directory path.
      Filenames are NOT prefaced by path.
      Returns null and sets lastError on error.

    static bool Exists(string path)
      Returns true if file exists, false if it doesn't.

    static bool Move(string source, string dest)
      Move a file from source to dest.
      Returns false and sets lastError on error.

    static Result<string> Read(string path)
      Reads content of file as text. Returns an instance of Result<string>.
      If succeeded, status = 0, value = file contents.
      On error, status != 0, message = an error message.

    static List<string> ReadLines(string path)
      Returns a list containing the lines of the given file.
      On error, returns null and sets last error.

    static bool SetCurrentDirectory(string newDir)
      Changes the current directory. Returns true on success.
      Returns false and sets lastError on error.

    static bool Write(string path, string contents)
      Writes contents to file. If file exists it is overwritten.
      Returns true on success.
      On error returns false and sets lastError.

};

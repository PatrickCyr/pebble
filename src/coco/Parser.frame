/*----------------------------------------------------------------------
Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation; either version 2, or (at your option) any 
later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License 
for more details.

You should have received a copy of the GNU General Public License along 
with this program; if not, write to the Free Software Foundation, Inc., 
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than 
Coco/R itself) does not fall under the GNU General Public License.

* Modifications have been made to this file by Patrick Cyr. 
----------------------------------------------------------------------*/
-->begin
using System;
using System.Collections.Generic;
using ExprList = System.Collections.Generic.List<Pebble.IExpr>;
using StrList = System.Collections.Generic.List<string>;
using TypeRefList = System.Collections.Generic.List<Pebble.ITypeRef>;
using LiteralList = System.Collections.Generic.List<Pebble.Expr_Literal>;

-->namespace

// This is only here because Coco tries to create one of these,
// though it doesn't try to use it. 
public class CodeGenerator {
}

public class Parser {
	// *** constants *************************************************************
-->constants
	// *** constants end *********************************************************

	const bool _T = true;
	const bool _x = false;
	const int minErrDist = 2;
	
	public Scanner scanner;
	public Errors  errors;
	public string scriptName;

	public Token t;    // last recognized token
	public Token la;   // lookahead token
	int errDist = minErrDist;

	// *** declarations *******************************************************
-->declarations
	// *** declarations end ***************************************************

	public Parser(Scanner scanner) {
		this.scanner = scanner;
		errors = new Errors();
	}

	void SynErr (int n) {
		if (errDist >= minErrDist) errors.SynErr(scriptName, la.line, la.col, n);
		errDist = 0;
	}

	/*
	public void SemErr (string msg) {
		if (errDist >= minErrDist) errors.SemErr(scriptName, t.line, t.col, msg);
		errDist = 0;
	}
	*/
	
	void Get () {
		for (;;) {
			t = la;
			la = scanner.Scan();
			if (la.kind <= maxT) { ++errDist; break; }
			// *** pragmas ****************************************************
-->pragmas
			// *** pragmas end ************************************************
			la = t;
		}
	}
	
	void Expect (int n) {
		if (la.kind==n) Get(); else { SynErr(n); }
	}
	
	bool StartOf (int s) {
		return set[s, la.kind];
	}
	
	void ExpectWeak (int n, int follow) {
		if (la.kind == n) Get();
		else {
			SynErr(n);
			while (!StartOf(follow)) Get();
		}
	}


	bool WeakSeparator(int n, int syFol, int repFol) {
		int kind = la.kind;
		if (kind == n) {Get(); return true;}
		else if (StartOf(repFol)) {return false;}
		else {
			SynErr(n);
			while (!(set[syFol, kind] || set[repFol, kind] || set[0, kind])) {
				Get();
				kind = la.kind;
			}
			return StartOf(syFol);
		}
	}

	// *** productions ********************************************************
-->productions
	// *** productions end ****************************************************

	public void Parse() {
		la = new Token();
		la.val = "";		
		Get();
		// *** parseRoot ******************************************************
-->parseRoot
		// *** parseRoot end **************************************************
	}
	
	static readonly bool[,] set = {
		// *** initialization *************************************************
-->initialization
		// *** initialization end *********************************************
	};
} // end Parser


public class Errors {
	public int count = 0;                                    // number of errors detected
	public System.IO.TextWriter errorStream = Console.Out;   // error messages go to this stream
	public List<ParseErrorInst> errors = new List<ParseErrorInst>();

	public virtual void SynErr (string scriptName, int line, int col, int n) {
		string s;
		switch (n) {
			// *** errors *****************************************************
-->errors
			// *** errors end *************************************************
			default: s = "error " + n; break;
		}
		//errorStream.WriteLine(errMsgFormat, line, col, s);
		// PRC: I made this!
		errors.Add(new ParseErrorInst(ParseErrorType.SyntaxError, scriptName + " [" + line + ":" + col + "] " + ParseErrorType.SyntaxError.ToString() + ": " + s));
		count++;
	}

	/* PRC: I'm not using these.
	public virtual void SemErr (string scriptName, int line, int col, string s) {
		//errorStream.WriteLine(errMsgFormat, line, col, s);
		// PRC: I made this!
		errors.Add(new ParseErrorInst(ParseErrorType.SemanticError, String.Format(errMsgFormat, scriptName, line, col, ParseErrorType.SemanticError.ToString(), s)));
		count++;
	}
	
	public virtual void SemErr (string scriptName, string s) {
		//errorStream.WriteLine(s);
		// PRC: I made this!
		errors.Add(new ParseErrorInst(ParseErrorType.SemanticError, scriptName + " " + ParseErrorType.SemanticError.ToString() + ": " + s));
		count++;
	}
	
	public virtual void Warning (int line, int col, string s) {
		errorStream.WriteLine(errMsgFormat, line, col, s);
	}
	
	public virtual void Warning(string s) {
		errorStream.WriteLine(s);
	}
	*/
} // Errors


public class FatalError: Exception {
	public FatalError(string m): base(m) {}
}

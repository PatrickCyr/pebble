const string path = "../src/lib/";
List<string> files = new {
	Add(
		"ConsoleLib.cs",
		"CoreDictionary.cs",
		"CoreLib.cs",
		"CoreList.cs",
		"DateTimeLib.cs",
		"DebugLib.cs",
		"FileLib.cs",
		"MathLib.cs",
		"RegexLib.cs",
		"StreamLib.cs",
		"StringLib.cs",
	);
};

global Stream stream = new;
stream.OpenWriteText("../doc/LibDocs.txt");

void Output(string a, string b = "", string c = "", string d = "", string e = "") {
	//Print(a, b, c, d, e);
	stream << String::Concat(a, b, c, d, e, "\n");
}

Output("*** Pebble built-in library documentation ***");
Output("");
Output("This file was generated by examples/GenerateLibDocs.txt on ", DateTime::GetNow().ThisToString());
Output("");

const string header = String::PadLeft("", 80, "*");

foreach (ix, file in files) {
	string fullpath = path..file;
	if (!File::Exists(fullpath)) {
		Output("ERROR: File '", fullpath, "' not found.");
		break;
	}
	
	Output("\n", header);
	Output(file);
	Output(header, "\n");

	bool inComment = false;
	bool inClass = false;
	string prefix = "";
	
	List<string> lines = File::ReadLines(fullpath);
	for (lineIx = 0, #lines - 1) {
		string line = lines[lineIx];
		line = String::Trim(line);
		
		if (!inComment) {
			if (String::StartsWith(line, "//@")) {
				line = String::Trim(String::SubstringRight(line, #line - 3));
				
				if (String::StartsWith(line, "class")) {
					if (inClass) {
						Output("};\n");
					}
				
					inClass = true;
					prefix = "    ";
					Output(line, " {");
				} else {
					Output(prefix, line);
				}
				inComment = true;
			}
		} else {
			if (String::StartsWith(line, "//")) {
				line = String::Trim(String::SubstringRight(line, #line - 2));
				Output(prefix, "  ", line);
			} else {
				inComment = false;
				Output("");
			}
		}
	}
	
	if (inClass) {
		prefix = "";
		Output("};");
	}
}

stream.Close();
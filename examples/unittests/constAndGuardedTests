/////////////////////////////////////////////
// const

class ConstTest {
	static num nextId = 1;
	// const is *not* static in Pebble, which allows us to initialize a const variable differently for each instance of the class, like this:
	const num id = nextId++;
	
	constructor {
		assert (ScriptError::AssignToConst) { id = -1; }
	}
	
	void F() {
		assert (ScriptError::AssignToConst) { id = -1; }
	}
	
	// ScriptError::ClassMemberFunctionsConst
	//const void G() { }
};

ConstTest a = new {
	assert (ScriptError::AssignToConst) { id = -1; }
};
assert (ScriptError::AssignToConst) { a.id = -1; }

assert(1 == a.id);
ConstTest a2 = new;
assert(2 == a2.id);

// All syntax errors.
//assert(ScriptError::SyntaxError) { List<const num> lcn; }
//functype<const num()> fcn;
//functype<num(const num)> fcn;

/////////////////////////////////////////////
// getonly

assert(ScriptError::GetonlyClassMembersOnly) { getonly num g; }
assert(ScriptError::GetonlyClassMembersOnly) { getonly void F(){} }

assert (ScriptError::GetonlyClassMembersOnly) { getonly num nonclass; }

class GetonlyTest {
	static getonly num sn = 100;
	getonly num n = 1;
	
	// These generate ScriptError::GetonlyNonConst
	//getonly const num sgc;
	//static getonly const num sgcn;
	
	constructor {
		GetonlyTest::sn = 200;
		n = 2;
	}
	
	GetonlyTest F() {
		sn = 300;
		n = 3;
		this;
	}
	
	// GetonlyClassMembersOnly
	//getonly void G() {}
	
	// ClassMemberFunctionsConst
	//getonly const void D() {}
};

GetonlyTest g = new {
	n = 4;
};

// Dot
assert (ScriptError::AssignToConst) { g.n = 5; } 
assert (ScriptError::AssignToConst) { GetonlyTest::sn = 5; } 

// Function call.
assert (ScriptError::AssignToConst) { g.F().n = 7; }

// Index
List<GetonlyTest> lgt = new { Add(g); };
assert (ScriptError::AssignToConst) { lgt[0].n = 9; }

class GetonlyChild : GetonlyTest {
	constructor {
		n = 1000;
		GetonlyTest::sn = 7;
	}
};

GetonlyChild gc = new {
	n *= 3;
	GetonlyTest::sn *= 3;
};
assert(3000 == gc.n);
assert(21 == GetonlyTest::sn);